domain: INFRA
type: KUBERNETES_PERSISTENTVOLUMECLAIM
configuration:
  entityExpirationTime: DAILY
  alertable: true
dashboardTemplates:
  newRelic:
    template: dashboard.json
    filterNRQLByEntityID: false
goldenTags:
- k8s.pvcName
- k8s.clusterName
- k8s.pvcNamespace
synthesis:
  rules:
    # kube-state-metrics data via opentelemetry prometheusReceiver 
    - compositeIdentifier:
        separator: ":"
        attributes:
          - k8s.cluster.name
          - namespace
          - persistentvolumeclaim
      encodeIdentifierInGUID: true
      name: persistentvolumeclaim
      conditions:
        # kube-state-metrics persistentvolumeclaim prefix
        - attribute: metricName
          prefix: kube_persistentvolumeclaim_
        # identifier attributes
        - attribute: persistentvolumeclaim
          present: true
        - attribute: namespace
          present: true
        - attribute: k8s.cluster.name
          present: true
        # open telemetry
        - attribute: newrelic.source
          value: 'api.metrics.otlp'
        # if service.name is present, it's a service
        - attribute: service.name
          present: false
        # value added for test entities only
        - attribute: newrelicOnly
          value: "true"
      tags:
        persistentvolumeclaim:
          entityTagNames: [k8s.pvcName]
        namespace:
          entityTagNames: [k8s.namespaceName]
        k8s.cluster.name:
          entityTagNames: [k8s.clusterName]
        phase:
          multiValue: false
          entityTagNames: [k8s.persistentvolumeclaim.statusPhase]
        volumename:
          entityTagNames: [k8s.persistentvolumeclaim.volumeName]
    # Infrastructure event data via opentelemetry 
    - compositeIdentifier:
        separator: ":"
        attributes:
          - k8s.cluster.name
          - k8.namespace.name
          - k8s.object.name
      encodeIdentifierInGUID: true
      name: k8s.object.name
      conditions:
        - attribute: event.name
          value: InfrastructureEvent
        - attribute: k8s.object.kind
          value: PersistentVolumeClaim
        # identifier attributes
        - attribute: k8s.object.name
          present: true
        - attribute: k8.namespace.name
          present: true
        - attribute: k8s.cluster.name
          present: true
        # open telemetry
        - attribute: newrelic.source
          value: api.events.otlp
        # if service.name is present, handle as one
        - attribute: service.name
          present: false
        # value added for test entities only
        - attribute: newrelicOnly
          value: "true"
    - identifier: entityId
      name: pvcName
      legacyFeatures:
        overrideGuidType: true
      conditions:
        - attribute: eventType
          value: K8sPersistentVolumeClaimSample
        - attribute: pvcName
          present: true
        - attribute: storageClass
          present: true
      tags:
        accessMode:
          entityTagName: k8s.persistentvolumeclaim.accessMode
        statusPhase:
          entityTagName: k8s.persistentvolumeclaim.statusPhase
        storageClass:
          entityTagName: k8s.persistentvolumeclaim.storageClass
        pvcName:
          entityTagName: k8s.pvcName
        volumeName:
          entityTagName: k8s.persistentvolumeclaim.volumeName
        namespaceName:
          entityTagName: k8s.namespaceName
        namespace:
          entityTagName: k8s.namespaceName
        clusterName:
          entityTagName: k8s.clusterName
        instanceType:
          entityTagName: host.instanceType
        integrationName:
          entityTagName: newrelic.integrationName
        integrationVersion:
          entityTagName: newrelic.integrationVersion
        agentVersion:
          entityTagName: newrelic.agentVersion
        awsRegion:
          entityTagName: aws.region
        provider.awsRegion:
          entityTagName: aws.region
      prefixedTags:
        label.:
