requests:
  title: Requests
  unit: COUNT
  queries:
    aws:
      select: sum(aws.s3.GetRequests) + sum(aws.s3.PutRequests) + sum(aws.s3.HeadRequests)
      from: Metric
      eventId: entity.guid
      eventName: entity.name
    awsSample:
      select: sum(`provider.getRequests.Sum`) + sum(`provider.putRequests.Sum`) + sum(`provider.headRequests.Sum`)
      from: DatastoreSample
      where: provider='S3BucketRequests'
      eventId: entityGuid
      eventName: entityName
errors4xxAnd5xx:
  title: Errors
  unit: COUNT 
  queries:
    aws:
      select: sum(`aws.s3.4xxErrors`) + sum(`aws.s3.5xxErrors`)
      from: Metric
      eventId: entity.guid
      eventName: entity.name
    awsSample:
      select: sum(`provider.error4xxErrors.Sum`) + sum(`provider.error5xxErrors.Sum`)
      from: DatastoreSample
      where: provider='S3BucketRequests'
      eventId: entityGuid
      eventName: entityName
latency:
  title: Latency
  unit: SECONDS 
  queries:
    aws:
      select: average(aws.s3.TotalRequestLatency) / 1000
      from: Metric
      eventId: entity.guid
      eventName: entity.name
    awsSample:
      select: average(provider.totalRequestLatency.Average) / 1000
      from: DatastoreSample
      eventId: entityGuid
      eventName: entityName
bytesDownloaded:
  title: Bytes downloaded
  unit: BYTES 
  queries:
    aws:
      select: sum(aws.s3.BytesDownloaded)
      from: Metric
      eventId: entity.guid
      eventName: entity.name
    awsSample:
      select: sum(`provider.bytesDownloaded.Sum`)
      from: DatastoreSample
      where: provider='S3BucketRequests'
      eventId: entityGuid
      eventName: entityName
bytesUploaded:
  title: Bytes uploaded
  unit: BYTES 
  queries:
    aws:
      select: sum(aws.s3.BytesUploaded)
      from: Metric
      eventId: entity.guid
      eventName: entity.name
    awsSample:
      select: sum(`provider.bytesUploaded.Sum`)
      from: DatastoreSample
      where: provider='S3BucketRequests'
      eventId: entityGuid
      eventName: entityName
