messagesPublished:
  title: Messages Published
  unit: COUNT
  queries:
    opentelemetry:
      select: sum(rabbitmq.message.published)
      from: Metric
      where: instrumentation.provider = 'opentelemetry'
      eventId: entity.guid
      eventName: entity.name

messagesDelivered:
  title: Messages Delivered
  unit: COUNT
  queries:
    opentelemetry:
      select: sum(rabbitmq.message.delivered)
      from: Metric
      where: instrumentation.provider = 'opentelemetry'
      eventId: entity.guid
      eventName: entity.name

messagesAcknowledged:
  title: Messages Acknowledged
  unit: COUNT
  queries:
    opentelemetry:
      select: sum(rabbitmq.message.acknowledged)
      from: Metric
      where: instrumentation.provider = 'opentelemetry'
      eventId: entity.guid
      eventName: entity.name

currentMessages:
  title: Current Messages
  unit: COUNT
  queries:
    opentelemetry:
      select: sum(rabbitmq.message.current)
      from: Metric
      where: instrumentation.provider = 'opentelemetry'
      eventId: entity.guid
      eventName: entity.name

readyMessages:
  title: Ready Messages
  unit: COUNT
  queries:
    opentelemetry:
      select: sum(rabbitmq.message.current)
      from: Metric
      where: state = 'ready' AND instrumentation.provider = 'opentelemetry'
      eventId: entity.guid
      eventName: entity.name

unacknowledgedMessages:
  title: Unacknowledged Messages
  unit: COUNT
  queries:
    opentelemetry:
      select: sum(rabbitmq.message.current)
      from: Metric
      where: state = 'unacknowledged' AND instrumentation.provider = 'opentelemetry'
      eventId: entity.guid
      eventName: entity.name

consumerCount:
  title: Consumer Count
  unit: COUNT
  queries:
    opentelemetry:
      select: sum(rabbitmq.consumer.count)
      from: Metric
      where: instrumentation.provider = 'opentelemetry'
      eventId: entity.guid
      eventName: entity.name

totalQueues:
  title: Total Queues in VHost
  unit: COUNT
  queries:
    opentelemetry:
      select: uniqueCount(rabbitmq.queue.name)
      from: Metric
      where: instrumentation.provider = 'opentelemetry' AND rabbitmq.queue.name IS NOT NULL
      eventId: entity.guid
      eventName: entity.name