throughput:
  title: Throughput
  unit: REQUESTS_PER_MINUTE
  queries:
    opentelemetry:
      select: rate(count(%.server%duration), 1 minute)
      from: Metric
      where: http.server.duration IS NOT NULL OR http.server.request.duration IS NOT NULL OR rpc.server.duration IS NOT NULL
    newrelic-opentelemetry:
      select: rate(count(apm.service.transaction.duration), 1 minute)
      from: Metric
    kamon-agent:
      select: rate(sum(http.server.requests), 1 minute) as 'count'
      from: Metric
    micrometer:
      select: rate(sum(http.server.requests), 1 minute) as 'count'
      from: Metric
    pixie:
      select: rate(count(http.server.duration), 1 minute)
      from: Metric
errorRate:
  title: Error rate
  unit: PERCENTAGE
  queries:
    opentelemetry:
      select: filter(count(%.server%duration), WHERE numeric(http.status_code) >= 500 OR numeric(http.response.status_code) >= 500) * 100 / count(%.server%duration)
      from: Metric
      where: http.server.duration IS NOT NULL OR http.server.request.duration IS NOT NULL
    newrelic-opentelemetry:
      select: sum(apm.service.error.count) * 100 / count(apm.service.transaction.duration)
      from: Metric
    kamon-agent:
      select: (filter(sum(http.server.requests), where http.status_code = '5xx') * 100) / sum(http.server.requests)
      from: Metric
    micrometer:
      select: (filter(sum(http.server.requests), where exception IS NOT NULL and exception != 'None') * 100) / sum(http.server.requests)
      from: Metric
    pixie:
      select: (filter(count(http.server.duration), where numeric(http.status_code) >= 400 AND numeric(http.status_code) != 404) * 100) / count(http.server.duration)
      from: Metric
responseTimeMs:
  title: Response time
  unit: MS
  queries:
    opentelemetry:
      select: average(convert(%.server%duration, unit OR 's', 'ms'))
      from: Metric
      where: http.server.duration IS NOT NULL OR http.server.request.duration IS NOT NULL OR rpc.server.duration IS NOT NULL
    newrelic-opentelemetry:
      select: average(convert(apm.service.transaction.duration, unit, 'ms'))
      from: Metric
    kamon-agent:
      select: average(http.server.requests)
      from: Metric
    micrometer:
      select: average(http.server.requests)
      from: Metric
    pixie:
      select: average(http.server.duration)
      from: Metric
