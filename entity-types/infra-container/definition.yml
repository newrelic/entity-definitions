domain: INFRA
type: CONTAINER

synthesis:
  rules:
  # Dockerstats receiver from otel collector.
  - identifier: container.id
    name: container.name
    encodeIdentifierInGUID: true
    conditions:
      - attribute: eventType
        value: Metric
      # All metrics from the receiver starts with the 'container.' prefix.
      - attribute: metricName
        prefix: container.
      - attribute: instrumentation.provider
        value: opentelemetry
      # This filters only metrics comming from docker receiver, given that metrics
      # could deffer between different runtime receivers. 
      - attribute: otel.library.name
        value: otelcol/dockerstatsreceiver
    tags:
      # Default resource attributes
      container.runtime:
      container.image.name:      
      container.hostname:
      # Optional resource attribute
      container.image.id:
      # Environment resource attributes
      host.type:
      cloud.provider:
      cloud.account.id:
      cloud.region:
      # The library name contains the name of the receiver that is used to identify the source
      # and select the dashboard.
      otel.library.name:
        entityTagName: instrumentation.name
  # kube-state-metrics data via opentelemetry prometheusReceiver 
  - compositeIdentifier:
      separator: ":"
      attributes:
        - k8s.cluster.name
        - namespace
        - pod
        - container
    encodeIdentifierInGUID: true
    name: container
    conditions:
      # kube-state-metrics container prefix
      - attribute: metricName
        prefix: kube_pod_container_
      # identifier attributes
      - attribute: container
        present: true
      - attribute: pod
        present: true
      - attribute: namespace
        present: true
      - attribute: k8s.cluster.name
        present: true
      # open telemetry
      - attribute: newrelic.source
        value: 'api.metrics.otlp'
      # if service.name is present, handle as one
      - attribute: service.name
        present: false
      # value added for test entities only
      - attribute: newrelicOnly
        value: "true"
  # cAdvisor data via opentelemetry prometheusReceiver 
  - compositeIdentifier:
      separator: ":"
      attributes:
        - k8s.cluster.name
        - namespace
        - pod
        - container
    encodeIdentifierInGUID: true
    name: container
    conditions:
      # cadvisor container prefix
      - attribute: metricName
        prefix: container_
      # identifier attributes
      - attribute: container
        present: true
      - attribute: pod
        present: true
      - attribute: namespace
        present: true
      - attribute: k8s.cluster.name
        present: true
      # open telemetry
      - attribute: newrelic.source
        value: 'api.metrics.otlp'
      # if service.name is present, handle as one
      - attribute: service.name
        present: false
      # value added for test entities only
      - attribute: newrelicOnly
        value: "true"
  # kubeletstatsreceiver data via opentelemetry 
  - compositeIdentifier:
      separator: ":"
      attributes:
        - k8s.cluster.name
        - k8s.namespace.name
        - k8s.pod.name
        - k8s.container.name
    encodeIdentifierInGUID: true
    name: k8s.container.name
    conditions:
      # cadvisor container prefix
      - attribute: metricName
        prefix: container.
      # identifier attributes
      - attribute: k8s.container.name
        present: true
      - attribute: k8s.pod.name
        present: true
      - attribute: k8s.namespace.name
        present: true
      - attribute: k8s.cluster.name
        present: true
      # open telemetry
      - attribute: newrelic.source
        value: 'api.metrics.otlp'
      # if service.name is present, handle as one
      - attribute: service.name
        present: false
      # value added for test entities only
      - attribute: newrelicOnly
        value: "true"
  tags:
    newrelic.integrationName:
    newrelic.integrationVersion:
    newrelic.agentVersion:
    host.instanceType:
    # For OpenTelemetry
    telemetry.sdk.name:
      entityTagName: instrumentation.provider
    telemetry.sdk.language:
      entityTagName: language
    # AWS tags
    aws.region:

goldenTags:
- environment
- container.state

configuration:
  entityExpirationTime: FOUR_HOURS
  alertable: true
