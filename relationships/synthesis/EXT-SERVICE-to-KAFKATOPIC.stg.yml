relationships:
  - name: extServiceProducesAwsMskTopic1_20StgOverride
    version: "1"
    origins:
      - Distributed Tracing
      - OpenTelemetry
    conditions:
      - attribute: eventType
        anyOf: [ "Span" ]
      - attribute: newrelic.source
        anyOf: [ "api.traces.otlp" ]
      - attribute: entity.type
        anyOf: [ "SERVICE" ]
      - attribute: span.kind
        anyOf: [ "producer", "client" ]
      - attribute: net.peer.name
        regex: "^[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.kafka\\.[^\\.]+\\.amazonaws\\.com:[0-9]+.*"
      - attribute: messaging.destination.name
        present: true
      - attribute: newrelic.aws_metric_streams.arn
        present: false
    relationship:
      expires: P75M
      relationshipType: PRODUCES
      source:
        extractGuid:
          attribute: entity.guid
      target:
        lookupGuid:
          candidateCategory: KAFKATOPIC
          fields:
            - field: clusterName
              capture:
                attribute: net.peer.name
                regex: "^[^\\.]+\\.([^\\.]+)\\.[^\\.]+\\.[^\\.]+\\.kafka\\.[^\\.]+\\.amazonaws\\.com:[0-9]+.*"
            - field: region
              capture:
                attribute: net.peer.name
                regex: "^[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.kafka\\.([^\\.]+)\\.amazonaws\\.com:[0-9]+.*"
            - field: topic
              attribute: messaging.destination.name

  - name: extServiceConsumesAwsMskTopic1_20StgOverride
    version: "1"
    origins:
      - Distributed Tracing
      - OpenTelemetry
    conditions:
      - attribute: eventType
        anyOf: [ "Span" ]
      - attribute: newrelic.source
        anyOf: [ "api.traces.otlp" ]
      - attribute: entity.type
        anyOf: [ "SERVICE" ]
      - attribute: span.kind
        anyOf: [ "consumer", "server" ]
      - attribute: net.peer.name
        regex: "^[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.kafka\\.[^\\.]+\\.amazonaws\\.com:[0-9]+.*"
      - attribute: messaging.destination.name
        present: true
      - attribute: newrelic.aws_metric_streams.arn
        present: false
    relationship:
      expires: P75M
      relationshipType: CONSUMES
      source:
        extractGuid:
          attribute: entity.guid
      target:
        lookupGuid:
          candidateCategory: KAFKATOPIC
          fields:
            - field: clusterName
              capture:
                attribute: net.peer.name
                regex: "^[^\\.]+\\.([^\\.]+)\\.[^\\.]+\\.[^\\.]+\\.kafka\\.[^\\.]+\\.amazonaws\\.com:[0-9]+.*"
            - field: region
              capture:
                attribute: net.peer.name
                regex: "^[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.kafka\\.([^\\.]+)\\.amazonaws\\.com:[0-9]+.*"
            - field: topic
              attribute: messaging.destination.name

  - name: extServiceProducesAwsMskTopic1_23StgOverride
    version: "1"
    origins:
      - Distributed Tracing
      - OpenTelemetry
    conditions:
      - attribute: eventType
        anyOf: [ "Span" ]
      - attribute: newrelic.source
        anyOf: [ "api.traces.otlp" ]
      - attribute: entity.type
        anyOf: [ "SERVICE" ]
      - attribute: span.kind
        anyOf: [ "producer", "client" ]
      - attribute: server.address
        regex: "^[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.kafka\\.[^\\.]+\\.amazonaws\\.com:[0-9]+.*"
      - attribute: messaging.destination.name
        present: true
      - attribute: newrelic.aws_metric_streams.arn
        present: false
    relationship:
      expires: P75M
      relationshipType: PRODUCES
      source:
        extractGuid:
          attribute: entity.guid
      target:
        lookupGuid:
          candidateCategory: KAFKATOPIC
          fields:
            - field: clusterName
              capture:
                attribute: server.address
                regex: "^[^\\.]+\\.([^\\.]+)\\.[^\\.]+\\.[^\\.]+\\.kafka\\.[^\\.]+\\.amazonaws\\.com:[0-9]+.*"
            - field: region
              capture:
                attribute: server.address
                regex: "^[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.kafka\\.([^\\.]+)\\.amazonaws\\.com:[0-9]+.*"
            - field: topic
              attribute: messaging.destination.name

  - name: extServiceConsumesAwsMskTopic1_23StgOverride
    version: "1"
    origins:
      - Distributed Tracing
      - OpenTelemetry
    conditions:
      - attribute: eventType
        anyOf: [ "Span" ]
      - attribute: newrelic.source
        anyOf: [ "api.traces.otlp" ]
      - attribute: entity.type
        anyOf: [ "SERVICE" ]
      - attribute: span.kind
        anyOf: [ "consumer", "server" ]
      - attribute: server.address
        regex: "^[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.kafka\\.[^\\.]+\\.amazonaws\\.com:[0-9]+.*"
      - attribute: messaging.destination.name
        present: true
      - attribute: newrelic.aws_metric_streams.arn
        present: false
    relationship:
      expires: P75M
      relationshipType: CONSUMES
      source:
        extractGuid:
          attribute: entity.guid
      target:
        lookupGuid:
          candidateCategory: KAFKATOPIC
          fields:
            - field: clusterName
              capture:
                attribute: server.address
                regex: "^[^\\.]+\\.([^\\.]+)\\.[^\\.]+\\.[^\\.]+\\.kafka\\.[^\\.]+\\.amazonaws\\.com:[0-9]+.*"
            - field: region
              capture:
                attribute: server.address
                regex: "^[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.kafka\\.([^\\.]+)\\.amazonaws\\.com:[0-9]+.*"
            - field: topic
              attribute: messaging.destination.name

  - name: extServiceCallsAwsMskTopic_ExplicitStgOverride
    version: "1"
    origins:
      - Distributed Tracing
      - OpenTelemetry
    conditions:
      - attribute: eventType
        anyOf: [ "Span", "Log" ]
      - attribute: newrelic.source
        anyOf: [ "api.traces.otlp", "api.logs.otlp" ]
      - attribute: entity.type
        anyOf: [ "SERVICE" ]
      - attribute: newrelic.aws_metric_streams.arn
        regex: "^arn:aws:kafka:[^:]*:[^:]*:cluster/[^:]*"
    relationship:
      expires: P75M
      relationshipType: CALLS
      source:
        extractGuid:
          attribute: entity.guid
      target:
        lookupGuid:
          candidateCategory: KAFKATOPIC_EXPLICIT
          fields:
            - field: cloudResourceId
              attribute: newrelic.aws_metric_streams.arn

  - name: apmProducesOtelKafkaTopicStgOverride
    version: "1"
    origins:
      - Distributed Tracing
      - OpenTelemetry
    conditions:
      - attribute: eventType
        anyOf: [ "Metric" ]
      - attribute: instrumentation.provider
        anyOf: [ "opentelemetry" ]
      - attribute: metricName
        startsWith: "kafka.producer"
      - attribute: entity.type
        anyOf: [ "SERVICE" ]
      - attribute: kafka.cluster.name
        present: true
      - attribute: topic
        present: true
    relationship:
      expires: P75M
      relationshipType: PRODUCES
      source:
        extractGuid:
          attribute: entity.guid
      target:
        lookupGuid:
          candidateCategory: KAFKATOPIC
          fields:
            - field: clusterName
              attribute: kafka.cluster.name
            - field: topic
              attribute: topic

  - name: apmConsumesOtelKafkaTopicStgOverride
    version: "1"
    origins:
      - OpenTelemetry
    conditions:
      - attribute: eventType
        anyOf: [ "Metric" ]
      - attribute: instrumentation.provider
        anyOf: [ "opentelemetry" ]
      - attribute: metricName
        startsWith: "kafka.consumer"
      - attribute: entity.type
        anyOf: [ "SERVICE" ]
      - attribute: kafka.cluster.name
        present: true
      - attribute: topic
        present: true
    relationship:
      expires: P75M
      relationshipType: CONSUMES
      source:
        extractGuid:
          attribute: entity.guid
      target:
        lookupGuid:
          candidateCategory: KAFKATOPIC
          fields:
            - field: clusterName
              attribute: kafka.cluster.name
            - field: topic
              attribute: topic